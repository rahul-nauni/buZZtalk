// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image     String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  conversationIDs String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIDs], references: [id])

  seenMessageIDs String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIDs], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  userID    String   @db.ObjectId
  type      String
  provider  String
  providerID String
  refreshToken String? @db.String
  accessToken String? @db.String
  expiresAt Int?
  tokenType String?
  scope String?
  idToken String?
  sessionState String?

  // relations
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([provider, providerID])
}

model Conversation {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String?
  isGroup Boolean?

  // relations
  userIDs String[] @db.ObjectId
  users User[] @relation(fields: [userIDs], references: [id])

  messageIDs String[] @db.ObjectId
  messages Message[]
}

model Message {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  // relations
  seenIds String[] @db.ObjectId
  seenBy User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationID String @db.ObjectId
  conversation Conversation @relation(fields: [conversationID], references: [id])

  senderID String @db.ObjectId
  sender User @relation(fields: [senderID], references: [id], onDelete: Cascade)
}